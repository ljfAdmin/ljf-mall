server.port=8081
server.servlet.context-path=/

spring.profiles.active=dev

# 可以循环依赖
spring.main.allow-circular-references=true

# 每个缓冲区的大小。默认值来自JVM可用的最大内存量；
server.undertow.buffer-size=1024
# 是否在Java堆外分配缓冲区。默认值来自JVM可用的最大内存量；
server.undertow.direct-buffers=true
# 线程相关配置：要为工作线程创建的I/O线程数。默认值来自可用处理器的数量。
server.undertow.threads.io=16
# 线程相关配置：工作线程数。默认值是输入/输出线程数的8倍。
server.undertow.threads.worker=256

# 1.设置thymeleaf模板引擎的缓存，设为关闭，默认为开启，上线的时候开启
# 2.设置edit Configuration-update resources
# 如果这个时候我想要改变前端页面，如何向之前jsp那样将可以不用重启服务器就可以进行刷新
#spring.thymeleaf.cache=false
spring.thymeleaf.cache=true
# 设置thymeleaf模板引擎的前缀后缀
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html

# 缓存相关
spring.cache.type=redis
# 存活时间，1小时
spring.cache.redis.time-to-live=3600000
# 如果指定了前缀，就用指定的前缀，如果没有指定前缀，就默认使用缓存的名字作为前缀
#spring.cache.redis.key-prefix=CACHE_
spring.cache.redis.use-key-prefix=true
# 是否缓存空值，防止缓存穿透
spring.cache.redis.cache-null-values=true

# 默认情况下json时间格式带有时区，并且是世界标准时间，和我们的时间差了八个小时
# 返回json的全局时间格式
spring.jackson.date-format=yyyy-MM-dd HH:mm:ss
spring.jackson.time-zone=GMT+8

# 配置MybatisPlus相关
mybatis-plus.mapper-locations=classpath:com/ljf/mapper/xml/**

# Mysql相关配置
#spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://127.0.0.1:3306/ljf_mall?useUnicode=true&serverTimezone=Asia/Shanghai&characterEncoding=utf8&autoReconnect=true&useSSL=false&allowMultiQueries=true&useAffectedRows=true
spring.datasource.username=root
spring.datasource.password=ljfmysql0107
# Druid数据库连接池
#spring.datasource.type=com.alibaba.druid.pool.DruidDataSource

# HikariDataSource：https://blog.csdn.net/wangmx1993328/article/details/81834974
# Spring Boot 默认数据源 HikariDataSource 的设置，号称java平台最快，替换Druid数据库连接池
spring.datasource.hikari.pool-name=hikariCP
# 最小空闲连接，默认值10
spring.datasource.hikari.minimum-idle=100
# 最大连接数,默认值10
spring.datasource.hikari.maximum-pool-size=200
spring.datasource.hikari.auto-commit=true
# 空闲连接超时时间，默认值600000(10分钟),只有空闲连接数大于最大连接数且空闲时间超过该值，才会被释放
# 如果大于等于max-lifetime且max-lifetime>0,则会被重置为0
spring.datasource.hikari.idle-timeout=10000
# 连接最大存活时间,默认值30分钟.设置应该比mysql设置的超时时间短
spring.datasource.hikari.max-lifetime=30000
# 连接超时时间(毫秒),默认值30秒
spring.datasource.hikari.connection-timeout=30000
# 连接测试查询
spring.datasource.hikari.connection-test-query=SELECT 1

# redis相关配置：https://blog.csdn.net/Ajekseg/article/details/124015291
# https://www.jb51.net/article/140192.htm
spring.redis.host=localhost
spring.redis.port=6379
# 超时时间，单位是毫秒
spring.redis.timeout=1800000
spring.redis.connect-timeout=1800000
spring.redis.client-type=lettuce
#spring.redis.expire=400
# 最大连接数：能够同时建立的“最大链接个数”
spring.redis.lettuce.pool.max-active=20
# 当borrow一个lettuce实例时，最大的等待时间，如果超过等待时间，则直接抛出JedisConnectionException
# 最大阻塞等待时间(负数表示没限制)，单位毫秒
spring.redis.lettuce.pool.max-wait=-1
#spring.redis.lettuce.pool.max-wait=500000
# 一个pool最多有多少个状态为idle(空闲的)的lettuce实例，默认值是8，当空闲链接数大于maxIdle时，将进行回收
#spring.redis.lettuce.pool.max-idle=9
spring.redis.lettuce.pool.max-idle=500
# 最小空闲数，默认是0，当低于minIdle时，将创建新的链接
spring.redis.lettuce.pool.min-idle=0

# alipay需要自行申请支付宝的沙箱账号、申请appID，并依次配置AppID、密钥、公钥，否则无法发起支付宝支付。
alipay.app-id=2021000117696266
# 商户私钥，您的PKCS8格式RSA2私钥
alipay.rsa-private-key=MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCAxeka/4Z2ZqSJEgZs1tywEBf/KCr/jtwIAsUqmo1CKhRu0QLZ0dV1CwYWmRNpu1+3sLw2kXeXnOGb/4ZNCKt6P2tDS7ty8mgRP3A/7EwxJpOODRUGXmrx57WCi3uE7LaNp6oVoj29LETpB9IS2HaJ68fCfWiA6hvTv5p6emgEW2RgNFHp5p+4KjuGEKLuBZczNXfdBKjKHWf0E7NcLGLiHSqxqpNjEUd8+OBDpO8a9tPv9PRF+zVAROWXfAK479mQrXOvm/kpB0BH+wyDCn+Iy/XxzEjGQAijfo56+SH0O7+HRIpvkQVfpST2XlAq4XZtj79F2qfUttChlEB8I2CJAgMBAAECggEAaE7n2YSuCG5wTM+bAMKylLMUnQyOd9/if2KvDymNztCDKJiJdKMyAtLhJaDtRrIOgJ7admEyvE7JuTEsOm4RaL7CRgqsVhnhDkeSx1TDCvUyhNg39aa5fiWws4QEk9Gite/gKBH5bKjVUOWS1s0ch+/DKdmnsvTvgYAsw5UveIbVFzOCI9itF2TwFckmD2w5wAcmorysBp9VGQgAatdorp2t8qNr/VclZi2nL1VxTRWMpP+5neTqG7LewYI7Sr5HVYk7bTVO6DQgHn1DU3OnTgYw5De0oZBDPAUwFdlkV5QMCizYccMI94zFHp5fZsEuXzflfmhJRFG4VN6HODWT4QKBgQDxPhaJsbf6B7Gg/+cOOYqM5byzaXTrKYMZeQyQsx8Wn15zEtH+Fz8oKh4fyqcPJSZOeFuOVl69w1m1LPYFjxr/GGW3FJEgBK53GlXxRnzltRLeaEbT4ZgOjV88ygns0szumq9/4d2ZwjllCto5d5wEPqohkymhIhgvzM8szeG4LQKBgQCIpoaiE+KaiimABFG0JOD/p1PLwz1rV4mTBh5roNhZw2J2dYzjai/Ca1Pm/6EKkW2YwQXSPQvQq3gWNaVvv2niI2dlTyAL+NgYPijiGQRpH2rSEHK7a0DwPN9xColUUSS6JuFbYg+cXb9nopXB+b4TrC4/PHBF5Y7u4hDV9eTHTQKBgGUfAHWBUDv3I6b3/ZNB3WjIF/wgdUjporF3wyOYYayq6v1TY0Cd3/RnCy+KU9KOYOs9misk2xuyGhVOnmWgIdHSGTjP3zFLpRH5sRKs2Ee1Sg5+KUpBYuqeqdAiZFyn1A0kO/Jf6/K6rjJDhUvXbkd9OPVP6YBIeVj4AdOnDTmVAoGBAIQD7TmT4G3QYHtusMhKgJw7uTa3bhTPwvcpCCaOg7VkjzFGK1Bg+7bmHW6jM5+UE79pawhLNajonuFF/ofQ8qgn7/Ht2VX3mD0DgFe+N4afdYFvpoft/BSbmnoI5ddxdPvqJ/ky6UX1Q78JUYjOj5VN2Hf7GbRNLCMYf49VOSpZAoGAb/kD5v9QOxG4ndcybM5pYdu29w34wnwr1md44A/BehtuCTkIVLznIBueUMxLCsjwFeCcId36RoYHmrxafRr1Y56O2Dj76Vpi/+lBkrpVMw0jfDgQpy1cT2CNAi51Mvc5K61dyS0mK4zwTKFChQyqXR21FXamG66bbJsKT7htKrw=
# 支付宝公钥，查看地址：https://openhome.alipay.com/platform/keyManage.htm 对应APPID下的支付宝公钥
alipay.alipay-public_key=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyT50aPNF9qlSohGVgMzsdWIY5v+2mYeVn69ptuMXStJh4GOWzNaQZgbLqDYoae1HGt+Dw1heKol/6zM4aVrJNH/v1s/1+V79sS6W/n6OffskUTOmgQdroUKV9c6XcYcyWcZJCEXvs3JHdSiTL31KLbr5ue/7MwvuZT5GhNxxNkkEpG00/zTYT+1gcKuEK9fnxagIo19MtKOCjuf4RhuJMqUHxjf/quIX+l74FqtfBR7L5L/Ov7zH2xg01U9Dz04+I9d9SDGX2QXJmS8Ph6W8LS4zMY3TpPJoaInaU4YdFIs4vSVrnmF7CFvmHqs9OkJiVntK1300DCYrGHEIr8asOQIDAQAB
#支付宝网关  这里我们使用的是沙箱环境
alipay.gateway=https://openapi.alipaydev.com/gateway.do
#字符编码格式
alipay.charset=utf-8
alipay.format=json
alipay.log-path=E://MySpace//ljf-mall//ljf-mall//log
# 签名方式
alipay.sign-type=RSA2

# 这里不需要设置
#服务器异步通知页面路径  需http://格式的完整路径，不能加?id=123这类自定义参数，必须外网可以正常访问
#alipay.notifyUrl=http://nwpd5c.natappfree.cc/alipay.trade.page.pay-JAVA-UTF-8/notify_url.jsp
#alipay.notifyUrl=http://3bg7b4.natappfree.cc/order/pay/notify
#alipay.notify-url=http://localhost:8081/order/pay/notify
#页面跳转同步通知页面路径 需http://格式的完整路径，不能加?id=123这类自定义参数，必须外网可以正常访问
#沙箱环境  工程公网访问地址即使用内网穿透客户端提供的域名
#alipay.returnUrl=http://nwpd5c.natappfree.cc/alipay.trade.page.pay-JAVA-UTF-8/return_url.jsp
#alipay.returnUrl=http://3bg7b4.natappfree.cc/order/pay/return
#alipay.return-url=http://localhost:8081/order/pay/return
#注：以上的notify-url、return-url 等启动内网穿透客户端再填写具体值

spring.mvc.pathmatch.matching-strategy=ant_path_matcher

# 日志相关的配置，但是这里由于配置了logback日志，故这里省略
# MybatisPlus日志相关
#mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl
# 设置日志级别
#logging.level.root=INFO

# RabbitMQ相关配置 https://www.cnblogs.com/codingmode/p/15696579.html
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest
# 连接到代理时用的虚拟主机
spring.rabbitmq.virtual-host=/
# 是否启用【发送端确认】，默认false
spring.rabbitmq.publisher-confirms=true
#spring.rabbitmq.publisher-confirm-type=correlated
# 开启发送端消息抵达队列确认，默认是false
spring.rabbitmq.publisher-returns=true
# 只要抵达队列，以异步方式优先回调returnConfirm
spring.rabbitmq.template.mandatory=true
# 消费端手动ack消息；默认是Auto，就是消息一抵达consumer，就自动回复，并不在意消息是否成功处理
spring.rabbitmq.listener.simple.acknowledge-mode=manual

## 连接超时时间，单位毫秒，0表示永不超时
#spring.rabbitmq.connection-timeout=0

## 容器类型.simple或direct，默认simple
##spring.rabbitmq.listener.type=simple
## 是否启动时自动启动容器
#spring.rabbitmq.listener.simple.auto-startup=true
## 表示消息确认方式，其有三种配置方式，分别是none、manual和auto；默认auto
#spring.rabbitmq.listener.direct.acknowledge-mode=manual
#spring.rabbitmq.listener.simple.acknowledge-mode=manual
## 决定被拒绝的消息是否重新入队；默认是true（与参数acknowledge-mode有关系）
#spring.rabbitmq.listener.simple.default-requeue-rejected= true
## 最小的消费者数量
#spring.rabbitmq.listener.simple.concurrency= 10
## 最大的消费者数量
#spring.rabbitmq.listener.simple.max-concurrency= 10
## 一个消费者最多可处理的nack消息数量，如果有事务的话，必须大于等于transaction数量.
#spring.rabbitmq.listener.simple.prefetch= 1
## 当ack模式为auto时，一个事务（ack间）处理的消息数量，最好是小于等于prefetch的数量.若大于prefetch， 则prefetch将增加到这个值
##spring.rabbitmq.listener.simple.transaction-size=

## 监听重试是否可用
#spring.rabbitmq.template.retry.enabled=true
## 最大重试次数
#spring.rabbitmq.template.retry.max-attempts=3
## 应用于上一重试间隔的乘数
#spring.rabbitmq.template.retry.multiplier=1.0